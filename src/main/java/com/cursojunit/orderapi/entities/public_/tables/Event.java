/*
 * This file is generated by jOOQ.
*/
package com.cursojunit.orderapi.entities.public_.tables;


import com.cursojunit.orderapi.entities.public_.Keys;
import com.cursojunit.orderapi.entities.public_.Public;
import com.cursojunit.orderapi.entities.public_.tables.records.EventRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 471153656;

    /**
     * The reference instance of <code>PUBLIC.EVENT</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>PUBLIC.EVENT.EVENTID</code>.
     */
    public final TableField<EventRecord, Integer> EVENTID = createField("EVENTID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_9E694BC4_5B3E_4889_9292_B4DEF286D8F8)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.EVENT.ORDERID</code>.
     */
    public final TableField<EventRecord, Integer> ORDERID = createField("ORDERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EVENT.EVENTTYPE</code>.
     */
    public final TableField<EventRecord, String> EVENTTYPE = createField("EVENTTYPE", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EVENT.AMOUNT</code>.
     */
    public final TableField<EventRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EVENT.CREATIONDATE</code>.
     */
    public final TableField<EventRecord, Timestamp> CREATIONDATE = createField("CREATIONDATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.EVENT</code> table reference
     */
    public Event() {
        this("EVENT", null);
    }

    /**
     * Create an aliased <code>PUBLIC.EVENT</code> table reference
     */
    public Event(String alias) {
        this(alias, EVENT);
    }

    private Event(String alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Event(String alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Event as(String alias) {
        return new Event(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(name, null);
    }
}
